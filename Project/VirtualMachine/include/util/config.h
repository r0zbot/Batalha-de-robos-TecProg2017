#ifndef VIRTUALMACHINE_CONFIG_H
#define VIRTUALMACHINE_CONFIG_H

/**
 * @file config.h
 *
 * @brief Configuration for global parameters for the project.
 *
 * This file sets global values for settings used throughout the project.
 */

//TODO: Redefine this variables here.

#define LOGGING_LEVEL DEBUG ///< The currently Logging Level being used in the system.

#define MACHINE_EXECUTION_STACK_SIZE 600  ///< The execution stack size in a {@link #Machine}.
#define MACHINE_MEMORY_SIZE          200  ///< The memory size in a {@link #Machine}.

#define MAX_CRYSTALS_PER_ROBOT 100 ///< Max amount of crystals that a robot can carry.

/// These properties below are set in main.cpp, which is generated by the manager/builder
class Config {

    public:
        static int available_crystals;         ///< The amount of crystals available to be spread through all the cells.

        static int machine_instructions_cycle; ///< Number of cycles that a {@link #Machine} can execute in a single operation.
        static int machine_health;             ///< Initial health capacity for {@link #Machine}.
        static int machine_melee_attack;       ///< Damage inflicted by a melee attack.
        static int machine_short_attack;       ///< Damage inflicted by a short range attack.
        static int machine_long_attack;        ///< Damage inflicted by a long range attack.

        static double machine_fuel;            ///< Amount of fuel an {@link #Machine} can hold.
        static double machine_mov_fuel_usage;  ///< Amount of fuel an {@link #Machine} uses to move to the next cell.
        static double machine_inst_fuel_usage; ///< Quantity of fuel used during the execution of one instruction.

        static int max_crystals_per_cell;      ///< The maximum amount of crystals a single cell can hold.
};

extern int lastRobotPos; //TODO: remove this after implementing army bases

#endif
